import logging
from datetime import datetime, timedelta

import numpy as np
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from apscheduler_di import ContextSchedulerDecorator
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

from app.config import Config
from app.keyboards.reply.back import back_kb
from app.keyboards.reply.events import choose_sub_kb
from app.states.inputs import NameSG
from data.googlecalendar.calendar_api import GoogleCalendar
from app.handlers.private.start import start_cmd
from app.keyboards.inline.calendar import days_cb, create_calendar_kb, none_cb, choose_day_cb, no_times_kb
import locale
import time

from app.keyboards.inline.pay import pay_kb, pay_cb
from app.keyboards.reply.calendar import calendar_kb, confirm_event_kb, subs_kb
from app.keyboards.reply.menu import orenda_kb, menu_kb
from app.keyboards.reply.times import generic_available_times
from app.misc.enums import EventStatusEnum, SubStatusEnum, UserStatusEnum, SubTypeEnum
from app.misc.utils import now, localize, amount_solution
from app.models import User
from app.models.event import Event
from app.models.subscribe import Subscribe
from app.services.fondy import FondyAPIWrapper
from app.services.repos import CalendarRepo, EventRepo, UserRepo, SubRepo
from app.states.calendar import EventSG
from data.googlesheets.sheets_api import GoogleSheet

format_time = '%A, %d %B'
locale.setlocale(locale.LC_ALL, 'uk_UA.UTF8')
log = logging.getLogger(__name__)


async def reserved_times_list(calendar: GoogleCalendar, calendar_db: CalendarRepo, day: datetime):
    inputs = []
    outputs = []
    courts = await calendar_db.get_all()
    for court in courts:
        inputs.append(calendar.reserved_time(court.google_id, day))
    start = now().replace(hour=7, minute=0, second=0)
    end = start.replace(hour=22)
    size = int((end - start) / timedelta(minutes=30)) + 1
    base_date_signal = [(start + timedelta(minutes=30 * i)).strftime('%H:%M') for i in range(size)]
    for input_signal in inputs:
        output_signal = np.zeros(size)
        for date in input_signal:
            start_date, end_date = date.split(' - ')
            if start_date in base_date_signal:
                index_start = base_date_signal.index(start_date)
                index_end = base_date_signal.index(end_date)
                output_signal[index_start:index_end + 1] = 1
                outputs.append(output_signal)
    out = sum(outputs)
    if isinstance(out, int):
        return []
    reserved_times = []
    cache = []
    for i in range(size):
        if out[i] >= len(courts):
            cache.append((start + timedelta(minutes=30 * i)).strftime('%H:%M'))
            if i != size and out[i+1] <= len(courts):
                reserved_times.append(cache)
                cache = []
            elif i == size:
                reserved_times.append(cache)
    return [f'{lst[0]} - {lst[-1]}' for lst in reserved_times]


async def choose_type(msg: Message, user_db: UserRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    if user.phone_number is None:
        await msg.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ.\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º\'—è (–ü.–Ü.–ë)')
        await NameSG.Input.set()
        await state.update_data(to_event=True)
        return
    if user.status == UserStatusEnum.TRAINER:
        await choose_date(msg, state)
        return
    await msg.answer('–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ—Ä–µ–Ω–¥–∏ üëá', reply_markup=orenda_kb)


async def choose_date(msg: Message, state: FSMContext):
    now_date = ', '.join([w.capitalize() for w in now().strftime(format_time).split(', ')])
    text = (
        f'–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ - <i><b>–°—å–æ–≥–æ–¥–Ω—ñ ({now_date})</b></i>.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>"–û–±—Ä–∞—Ç–∏ —Ü—é –¥–∞—Ç—É üëå"</b> '
        f'–∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É.'
    )
    await state.update_data(reserved_times=[])
    await msg.answer('–ë—É–¥—å-–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä—Ç—É', reply_markup=back_kb)
    date_kb, choose_kb = create_calendar_kb(now())
    cal_msg = await msg.answer('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ ‚¨á', reply_markup=date_kb)
    lst_msg = await msg.answer(text, reply_markup=choose_kb)
    await state.update_data(last_msg_id=lst_msg.message_id, calendar_msg_id=cal_msg.message_id, now_date=now_date)


async def pagination_calendar(call: CallbackQuery, callback_data: dict, state: FSMContext,
                              calendar: GoogleCalendar, calendar_db: CalendarRepo):
    data = await state.get_data()
    await call.bot.delete_message(call.from_user.id, data['last_msg_id'])
    await call.bot.delete_message(call.from_user.id, data['calendar_msg_id'])
    wait = await call.message.answer('–ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ ‚åõ')
    current_day = now().replace(
        year=int(callback_data['y']),
        month=int(callback_data['m']),
        day=int(callback_data['d']),
    )
    reserved_times = await reserved_times_list(calendar, calendar_db, current_day)
    answer = generic_available_times(
        start=localize(current_day).replace(hour=7, minute=0, second=0, microsecond=0),
        end=localize(current_day).replace(hour=21, minute=0, second=0, microsecond=0),
        reserved_times=reserved_times, only_keyboard=True
    )
    now_date = ', '.join([w.capitalize() for w in current_day.strftime(format_time).split(', ')])
    if len(answer[0]) == 0:
        await state.finish()
        await call.message.answer(f'‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ {now_date}')
        await choose_date(call.message, state)
        return
    if localize(current_day).replace(hour=22, minute=0) < now():
        await call.answer('–í–∏–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', show_alert=True)
        return
    await call.answer()
    await wait.delete()
    await state.update_data(reserved_times=reserved_times, now_date=now_date)
    date_kb, choose_kb = create_calendar_kb(current_day)
    cal_msg = await call.message.answer('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ ‚¨á', reply_markup=date_kb)
    msg = await call.message.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É: <i><b>{now_date}</b></i>.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>"–û–±—Ä–∞—Ç–∏ —Ü—é –¥–∞—Ç—É üëå"</b>'
                                    f' –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É.', reply_markup=choose_kb)
    await state.update_data(last_msg_id=msg.message_id, calendar_msg_id=cal_msg.message_id)


async def none_callback_answer(call: CallbackQuery):
    await call.answer('–¶—ñ–∫–∞–≤–æ, –∞ —â–æ –±—É–¥–µ —è–∫—â–æ —Å—é–¥–∏ —Ç–∏—Ü–Ω—é—Ç–∏...')


async def choose_event_data(call: CallbackQuery, callback_data: dict, state: FSMContext,
                            calendar: GoogleCalendar, calendar_db: CalendarRepo):
    await call.answer()
    data = await state.get_data()
    await call.message.delete()
    try:
        await call.bot.delete_message(call.from_user.id, data['calendar_msg_id'])
    except:
        pass
    current = now().replace(
        year=int(callback_data['y']),
        month=int(callback_data['m']),
        day=int(callback_data['d']),
        hour=8, minute=0, second=0
    )
    now_date = ', '.join([w.capitalize() for w in current.strftime(format_time).split(', ')])
    await state.update_data(now_date=now_date)
    reserved_times = await reserved_times_list(calendar, calendar_db, current)
    text = (
        f'<b>1)</b> üóì –í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {data["now_date"]}\n'
        f'<b>2)</b> –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä—Ç—É üëá'
    )
    reply_markup, answer = generic_available_times(
        start=localize(current).replace(hour=7, minute=0, second=0, microsecond=0),
        end=localize(current).replace(hour=21, minute=0, second=0, microsecond=0),
        reserved_times=reserved_times
    )
    if len(answer[0]) == 0:
        await state.finish()
        await call.message.answer(f'‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω –Ω–∞ {now_date}')
        await choose_date(call.message, state)
        return
    await call.message.answer(text=text, reply_markup=reply_markup)
    await state.update_data(current=current.isoformat(), reserved_times=reserved_times)
    await EventSG.Start.set()


async def start_date_save(msg: Message, state: FSMContext):
    data = await state.get_data()
    current = localize(datetime.fromisoformat(data['current']))
    text = (
        f'<b>1)</b> üóì –í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {data["now_date"]}\n\n'
        '<b>2)</b> üÜï –ß–∞—Å\n'
        f'<b>–ü–æ—á–∞—Ç–æ–∫</b>: {msg.text}\n\n'
        f'–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∫—ñ–Ω—Ü—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä—Ç—É üëá'
    )
    await state.update_data(start_date=msg.text)
    start = current.replace(hour=int(msg.text.split(':')[0]), minute=int(msg.text.split(':')[-1]),
                            second=0, microsecond=0)
    if start.hour == 21:
        end = start + timedelta(hours=1)
    else:
        end = start + timedelta(hours=3)
    reply_markup, answer = generic_available_times(
        start=start,
        end=end,
        reserved_times=data['reserved_times'],
        remove_start=True
    )
    if answer is None:
        await state.finish()
        await msg.answer('–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω')
        await choose_date(msg, state)
        return
    await msg.answer(text, reply_markup=reply_markup)
    await EventSG.End.set()


async def end_date_save(msg: Message, state: FSMContext, user_db: UserRepo, sub_db: SubRepo,
                        calendar_db: CalendarRepo, calendar: GoogleCalendar):
    data = await state.get_data()
    user = await user_db.get_user(msg.from_user.id)
    subs = await sub_db.get_subs_by_user_id(user.user_id)
    start_date = data['start_date']
    end_date = msg.text
    current_day = localize(datetime.fromisoformat(data['current']))
    start = current_day.replace(hour=int(start_date.split(':')[0]), minute=int(start_date.split(':')[-1]))
    end = current_day.replace(hour=int(end_date.split(':')[0]), minute=int(end_date.split(':')[-1]))
    if start.strftime('%a').capitalize() in ('–°–±', '–ù–¥'):
        if start.hour >= 17:
            sub_type = SubTypeEnum.HOLEVENING
        else:
            sub_type = SubTypeEnum.HOLMORNING
    else:
        if start.hour >= 17:
            sub_type = SubTypeEnum.WEEKEVENING
        else:
            sub_type = SubTypeEnum.WEEKMORNING
    reply_markup = calendar_kb
    subs = [sub for sub in subs if sub.type in (sub_type, SubTypeEnum.ALL) and all(
        [sub.status == SubStatusEnum.ACTIVE, sub.total_hours > 0]
    )]
    if subs:
        reply_markup = confirm_event_kb
        await state.update_data(subs=[sub.sub_id for sub in subs])
    await msg.answer('–ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤—ñ–ª—å–Ω—ñ –º—ñ—Å—Ü—è')
    await msg.answer('‚è≥')
    court, times, reserved_times = await check_time_is_free(calendar_db, calendar, start, end)
    if court is None:
        await msg.answer(f'–¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π\n{times}\n\n–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —á–∞—Å üëá', reply_markup=no_times_kb(current_day))
        await state.update_data(reserved_times=reserved_times)
        await EventSG.Start.set()
        return
    else:
        await state.update_data(calendar_id=court.calendar_id)
    amount = amount_solution(user, time=(start, end))
    text = (
        f'üóì –í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É: <b>{data["now_date"]}</b>\n\n'
        f'‚è∞–ü–æ—á–∞—Ç–æ–∫: <b>{start_date}</b>\n'
        f'‚è∞–ö—ñ–Ω–µ—Ü—å: <b>{msg.text}</b>\n'
        f'üí∏–¶—ñ–Ω–∞: <b>{amount}</b>\n'
        f'üìç–ö–æ—Ä—Ç: <b>{court.name}</b>, {court.location}\n\n'
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä üëá'
    )
    await msg.answer(text, reply_markup=reply_markup)
    await state.update_data(end_date=msg.text)
    await EventSG.Confirm.set()


async def user_sub_choose(msg: Message, sub_db: SubRepo, state: FSMContext):
    text = ''
    data = await state.get_data()
    subs = [await sub_db.get_sub(int(sub_id)) for sub_id in data['subs']]
    for sub in subs:
        text += f'üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç ‚Ññ{sub.sub_id} ({sub.description})\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≥–æ–¥–∏–Ω: {sub.total_hours}\n\n'
    await msg.answer(text, reply_markup=subs_kb([sub for sub in subs if sub.status == SubStatusEnum.ACTIVE]))
    await EventSG.Confirm.set()


async def confirm_event(msg: Message, calendar: GoogleCalendar, calendar_db: CalendarRepo,
                        state: FSMContext, fondy: FondyAPIWrapper, event_db: EventRepo,
                        user_db: UserRepo, scheduler: ContextSchedulerDecorator, sub_db: SubRepo,
                        sheet: GoogleSheet, config: Config):
    await msg.answer('–†–µ–∑–µ—Ä–≤—É—é –≤–∞—à —á–∞—Å')
    await msg.answer('‚è≥')
    format_hours = '%H:%M'
    data = await state.get_data()
    end_date = data['end_date']
    start_date = data['start_date']
    current_day = localize(datetime.fromisoformat(data['current']))
    end = current_day.replace(hour=int(end_date.split(':')[0]), minute=int(end_date.split(':')[-1]))
    start = current_day.replace(hour=int(start_date.split(':')[0]), minute=int(start_date.split(':')[-1]))
    user = await user_db.get_user(msg.from_user.id)
    court = await calendar_db.get_calendar(data['calendar_id'])
    hours = int((end - start).seconds / 3600)
    sub = False
    if msg.text.startswith('–ê–±–æ–Ω–µ–º–µ–Ω—Ç'):
        sub_id = int(msg.text.split('#')[-1])
        sub = await sub_db.get_sub(sub_id)
        if sub.total_hours >= hours:
            await sub_db.update_sub(sub_id, total_hours=sub.total_hours-hours)
            if sub.total_hours-hours == 0:
                await sub_db.update_sub(sub.sub_id, status=SubStatusEnum.PASSED)
        else:
            await msg.answer(f'–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –≥–æ–¥–∏–Ω –¥–ª—è –≤–∞—à–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É (–ó–∞–ª–∏—à–∏–ª–æ—Å—å {sub.total_hours})\n'
                             f'–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?',
                             reply_markup=choose_sub_kb)
            return
    event = await event_db.add(
        user_id=msg.from_user.id,
        calendar_id=court.google_id,
        start=start.replace(tzinfo=None),
        end=end.replace(tzinfo=None)
    )
    amount = amount_solution(user, event)
    log.warning('CREATE CALENDAR EVENT')
    calendar_event = calendar.create_event(
        name=f'(‚Ññ{event.event_id}) {user.full_name} ({court.name})', calendar_id=court.google_id,
        start=start, end=end, user=user
    )
    text = (
        f'<b>3)</b>üßæ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∏ –∫–æ—Ä—Ç—É ‚Ññ{event.event_id}\n\n'
        f'üóì–î–∞—Ç–∞: <b>{start.strftime(format_time)}</b>\n'
        f'‚è∞–ß–∞—Å: <b>–∑ {start.strftime(format_hours)} –¥–æ {end.strftime(format_hours)}</b>\n'
        f'üí∏–¶—ñ–Ω–∞: <b>{amount} –≥—Ä–Ω.</b>\n'
        f'üìç–ö–æ—Ä—Ç: {court.location} (<b>{court.name}</b>)\n'
    )
    add_text = (
        f'\n\n‚Ñπ –ú–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞–ª–∏ —Ü–µ–π —á–∞—Å –¥–ª—è –≤–∞—Å –Ω–∞ 15 —Ö–≤. '
        f'–û–ø–ª–∞—Ç—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n'
    )
    if user.status == UserStatusEnum.VIP:
        text += '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—è –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏'
        await msg.answer(text)
        await event_db.update_event(event.event_id, google_id=calendar_event['id'], status=EventStatusEnum.PAID)
        sheet.write_event(event, user, config.misc.spreadsheet, court)
        await start_cmd(msg, user_db, state, sheet, config)
        return
    if sub:
        text += f'–ì–æ–¥–∏–Ω–∏ —Å–ø–∏—Å–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É'
        await msg.answer(text)
        calendar.event_paid(court.google_id, calendar_event['id'], user)
        await event_db.update_event(event.event_id, google_id=calendar_event['id'], status=EventStatusEnum.PAID,
                                    price=0)
        await start_cmd(msg, user_db, state, sheet, config)
        sheet.write_event(event, user, config.misc.spreadsheet, court)
        for admin_id in config.bot.admin_ids:
            try:
                event_link = 'https://docs.google.com/spreadsheets/d/{}/edit#gid=1781353891&range=A{}:D{}'.format(
                    config.misc.spreadsheet, event.event_id + 1, event.event_id + 1
                )
                text = (
                    f'üÜï (‚Ññ{event.event_id}) –ù–æ–≤–∞ –æ—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç—É –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.full_name}\n\n'
                    f'–¢–∏–ø –æ–ø–ª–∞—Ç–∏: –ê–±–æ–Ω–µ–º–µ–Ω—Çn\n'
                    f'üìå –î–∞—Ç–∞: {event.start.strftime("%A %d, %B")} –∑ {event.start.strftime("%H:%M")} –ø–æ '
                    f'{event.end.strftime("%H:%M")}\n\n'
                    f'üìö <a href="{event_link}">–¶—è –ø–æ–¥—ñ—è –≤ —Ç–∞–±–ª–∏—Ü—ñ</a>'
                )
                await msg.bot.send_message(admin_id, text)
            except:
                pass
        return
    text += add_text
    # ORDER CREATION
    description = (
        f'‚Ññ{event.event_id} –û–ø–ª–∞—Ç–∞ –æ—Ä–µ–Ω–¥–∏ –∫–æ—Ä—Ç—É {court.name} {start.strftime(format_time)} '
        f'–∑ {start.strftime(format_hours)} –¥–æ {end.strftime(format_hours)}. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
        f'{user.full_name} ({user.user_id}), —Ç–µ–ª. {user.phone_number}'
    )
    order = await fondy.create_order(description=description, amount=amount, user=user, event_id=event.event_id)
    msg = await msg.answer(text, reply_markup=pay_kb(order['url'], event_id=event.event_id))
    job = scheduler.add_job(
        name=f'–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏ ‚Ññ{event.event_id}', func=check_order_polling,
        trigger='interval', seconds=6, max_instances=5,
        kwargs=dict(
            msg=msg, event=event, user_db=user_db, event_db=event_db, fondy=fondy,
            calendar=calendar, hours=hours, calendar_db=calendar_db,
            sheet=sheet
        )
    )
    await event_db.update_event(
        event.event_id,
        order_id=order['order_id'],
        google_id=calendar_event['id'],
        price=amount,
        job_id=job.id
    )
    log.warning('CREATE SHEET EVENT')
    sheet.write_event(event, user, config.misc.spreadsheet, court)
    await state.finish()


async def non_state(msg: Message):
    await msg.answer('–ë—É–¥—å –ª–∞—Å–∫–∞ –æ–ø–ª–∞—Ç—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è')


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(pagination_calendar, days_cb.filter(), state='*')
    dp.register_callback_query_handler(none_callback_answer, none_cb.filter(), state='*')
    dp.register_callback_query_handler(choose_event_data, choose_day_cb.filter(), state='*')
    dp.register_callback_query_handler(decline_event, pay_cb.filter(), state='*')

    dp.register_message_handler(choose_type, text='–ù–æ–≤–∞ –æ—Ä–µ–Ω–¥–∞  ‚ûï', state='*')
    dp.register_message_handler(choose_date, text='–û—Ä–µ–Ω–¥–∞ –≥–æ–¥–∏–Ω üïú', state='*')
    dp.register_message_handler(choose_date, state=EventSG.Calendar)
    dp.register_message_handler(start_date_save, state=EventSG.Start)
    dp.register_message_handler(end_date_save, state=EventSG.End)
    dp.register_message_handler(user_sub_choose, state='*', text='–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç')
    dp.register_message_handler(confirm_event, state=EventSG.Confirm)


async def decline_event(
    call: CallbackQuery, callback_data: dict,
    event_db: EventRepo,
    user_db: UserRepo,
    calendar_db: CalendarRepo,
    calendar: GoogleCalendar,
    sub_db: SubRepo,
    scheduler: ContextSchedulerDecorator,
    sheet: GoogleSheet, config: Config
):
    await call.answer()
    await call.message.delete_reply_markup()
    event_id = int(callback_data.get('event_id'))
    if callback_data.get('type') == 'event':
        event = await event_db.get_event(event_id)
        await call.message.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω—è #{event.event_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ', reply_markup=menu_kb)
        user = await user_db.get_user(event.user_id)
        court = await calendar_db.get_calendar_by_google_id(event.calendar_id)
        if scheduler.get_job(event.job_id):
            scheduler.remove_job(event.job_id)
        calendar.delete_event(event.calendar_id, event.google_id)
        await event_db.update_event(event.event_id, status=EventStatusEnum.DELETED)
        sheet.write_event(event, user, config.misc.spreadsheet, court)
        await event_db.delete_event(event.event_id)
    else:
        sub = await sub_db.get_sub(event_id)
        await call.message.answer(f'–ê–±–æ–Ω–µ–º–µ–Ω—Ç ‚Ññ{sub.sub_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ', reply_markup=menu_kb)
        user = await user_db.get_user(sub.sub_id)
        if scheduler.get_job(sub.job_id):
            scheduler.remove_job(sub.job_id)
        await sub_db.update_sub(sub.sub_id, status=SubStatusEnum.PASSED)
        sheet.write_event(sub, user, config.misc.spreadsheet)
        await sub_db.delete_sub(event_id)


async def check_order_polling(
        msg: Message,
        event: Event,
        user_db: UserRepo,
        event_db: EventRepo,
        calendar_db: CalendarRepo,
        fondy: FondyAPIWrapper,
        calendar: GoogleCalendar,
        hours: int,
        sheet: GoogleSheet, config: Config,
        scheduler: ContextSchedulerDecorator,
):
    try:
        now_date = event.created_at
        check = await fondy.check_order(event.order_id)
        if (now() - now_date).seconds > 60*15:
            await delete_event(msg, event, event_db, user_db, calendar_db, sheet, calendar, config)
            scheduler.get_job(event.job_id).remove()
        if await event_db.get_event(event.event_id) is None:
            return
        if check:
            log.info(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event.event_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª—á–µ–Ω–æ')
            await msg.delete_reply_markup()
            user = await user_db.get_user(event.user_id)
            court = await calendar_db.get_calendar_by_google_id(event.calendar_id)
            scheduler.get_job(event.job_id).remove()
            await user_db.update_user(user.user_id, hours=user.hours + hours)
            await check_user_status(user, msg, user_db)
            await event_db.update_event(event.event_id, status=EventStatusEnum.PAID)
            await msg.reply(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event.event_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ', reply_markup=menu_kb)
            await msg.answer(guide_text)
            calendar.event_paid(event.calendar_id, event.google_id, user)
            sheet.write_event(await event_db.get_event(event.event_id), user, config.misc.spreadsheet, court)
            for admin_id in config.bot.admin_ids:
                try:
                    event_link = 'https://docs.google.com/spreadsheets/d/{}/edit#gid=1781353891&range=A{}:D{}'.format(
                        config.misc.spreadsheet, event.event_id + 1, event.event_id + 1
                    )
                    text = (
                        f'üÜï (‚Ññ{event.event_id}) –ù–æ–≤–∞ –æ—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç—É –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.full_name}\n\n'
                        f'üìå –î–∞—Ç–∞: {event.start.strftime("%A %d, %B")} –∑ {event.start.strftime("%H:%M")} –ø–æ '
                        f'{event.end.strftime("%H:%M")}\n\n'
                        f'üìö <a href="{event_link}">–¶—è –ø–æ–¥—ñ—è –≤ —Ç–∞–±–ª–∏—Ü—ñ</a>'
                    )
                    await msg.bot.send_message(admin_id, text=text)
                except:
                    pass
    except Exception as Error:
        error = str(Error).replace('<', '').replace('>', '')
        user = await user_db.get_user(event.user_id)
        log.warning(f'–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏ #{event.event_id}\n\n{error}\n')
        await msg.answer(f'‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ä–µ–Ω–¥–∏ ‚Ññ{event.event_id} –Ω–µ –±—É–ª–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É\n\n{error}\n\n'
                         f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è.')
        for admin_id in config.bot.admin_ids:
            await msg.bot.send_message(admin_id, f'‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.full_name} (‚Ññ{event.event_id}) '
                                                 f'–±—É–ª–∞ –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É\n\n{Error}\n\n'
                                                 f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user.phone_number}')
        scheduler.get_job(event.job_id).remove()


async def delete_event(msg: Message, event: Event, event_db: EventRepo,  user_db: UserRepo, calendar_db: CalendarRepo,
                       sheet: GoogleSheet,  calendar: GoogleCalendar, config: Config,):
    calendar.delete_event(event.calendar_id, event.google_id)
    user = await user_db.get_user(event.user_id)
    court = await calendar_db.get_calendar_by_google_id(event.calendar_id)
    sheet.write_event(event, user, config.misc.spreadsheet, court)
    await event_db.delete_event(event.event_id)
    await msg.answer(f'–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ‚Ññ{event.event_id} –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —á–µ—Ä–µ–∑ –Ω–µ–æ–ø–ª–∞—Ç—É', reply_markup=menu_kb)


async def check_order_sub_polling(
        msg: Message,
        sub: Subscribe,
        sub_db: SubRepo,
        user_db: UserRepo,
        fondy: FondyAPIWrapper,
        sheet: GoogleSheet, config: Config,
        scheduler: ContextSchedulerDecorator
):
    try:
        now_date = sub.created_at
        await sub_db.get_sub(sub.sub_id)
        check = await fondy.check_order(sub.order_id)
        log.info(check)
        if (now() - now_date).seconds > 60*15:
            await delete_sub(msg, sub, sub_db, user_db, sheet, config)
            scheduler.get_job(sub.job_id).remove()
        if check:
            user = await user_db.get_user(sub.user_id)
            scheduler.get_job(sub.job_id).remove()
            await user_db.update_user(user.user_id, hours=user.hours + 10)
            await check_user_status(user, msg, user_db)
            await sub_db.update_sub(sub.sub_id, total_hours=sub.total_hours, status=SubStatusEnum.ACTIVE)
            await msg.delete_reply_markup()
            await msg.reply(f'–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ‚Ññ{sub.sub_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ', reply_markup=menu_kb)
            sheet.write_event(await sub_db.get_sub(sub.sub_id), user, config.misc.spreadsheet)
            for admin_id in config.bot.admin_ids:
                try:
                    text = (
                        f'üÜï‚≠ê (‚Ññ{sub.sub_id}) –ù–æ–≤–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø—Ä–∏–¥–±–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user.full_name}\n\n'
                        f'üìå –î–∞—Ç–∞: {localize(sub.created_at).strftime("%A %d, %B")}\n'
                        f'–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {sub.description}'
                    )
                    await msg.bot.send_message(admin_id, text=text)
                except:
                    pass
    except Exception as Error:
        error = str(Error).replace('<', '').replace('>', '')
        user = await user_db.get_user(sub.user_id)
        log.warning(f'–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏ #{sub.sub_id}\n\n{Error}\n')
        await msg.answer(f'‚ùå –û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ‚Ññ{sub.sub_id} –Ω–µ –±—É–ª–∞ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É\n\n{error}\n\n'
                         f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è.')
        for admin_id in config.bot.admin_ids:
            await msg.bot.send_message(admin_id, f'‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.full_name} (‚Ññ{sub.sub_id}) '
                                                 f'–±—É–ª–∞ –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É\n\n{error}\n\n'
                                                 f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user.phone_number}')
        scheduler.get_job(sub.job_id).remove()


async def delete_sub(msg: Message, sub: Subscribe, sub_db: SubRepo, user_db: UserRepo, sheet: GoogleSheet,
                     config: Config):
    await sub_db.delete_sub(sub.sub_id)
    user = await user_db.get_user(sub.user_id)
    sheet.write_event(sub, user, config.misc.spreadsheet)
    await msg.answer(f'–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ‚Ññ{sub.sub_id} —Å–∫–∞—Å–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–æ–ø–ª–∞—Ç—É', reply_markup=menu_kb)


async def check_user_status(user: User, msg: Message, user_db: UserRepo):
    if user.hours >= 20 and user.status == UserStatusEnum.COMMON:
        await user_db.update_user(user.user_id, status=UserStatusEnum.REGULAR)
        await msg.answer('ü•≥ –í—ñ—Ç–∞—î–º–æ! –°—É–º–∞ –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö –æ—Ä–µ–Ω–¥ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ 20 –≥–æ–¥–∏–Ω. '
                         '–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å—Ç–∞—Ç—É—Å –ü–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –∑–Ω–∏–∂–∫—É –Ω–∞ –∞—Ä–µ–Ω–¥—É –∫–æ—Ä—Ç—ñ–≤ 10%')


async def check_time_is_free(calendar_db: CalendarRepo, calendar: GoogleCalendar,
                             start: datetime, end: datetime):
    end = localize(end)
    start = localize(start)
    times = ''
    reserved_times_answer_cache = []
    for court in await calendar_db.get_all():
        calendar.insert_calendar(court.google_id)
        reserved_times = calendar.reserved_time(court.google_id, start)
        times += f'\n–ö–æ—Ä—Ç ‚Ññ{court.calendar_id}:'
        times += ''.join([f'\n‚ñ´ {t}' for t in reserved_times]) if reserved_times else ' –í—ñ–¥—Å—É—Ç–Ω—ñ'
        reserved_times_date = []

        for t in reserved_times:
            reserved_times_answer_cache.append(t)
            start_str, end_str = t.split(' - ')
            start_date = start.replace(hour=int(start_str.split(':')[0]), minute=int(start_str.split(':')[1]))
            end_date = start.replace(hour=int(end_str.split(':')[0]), minute=int(end_str.split(':')[1]))
            reserved_times_date.append((start_date, end_date))

        check = []
        for t in reserved_times_date:
            reserved_start, reserved_end = t
            if reserved_start < end < reserved_end:
                check.append(False)
            elif reserved_start < start < reserved_end:
                check.append(False)
            elif start == reserved_start or end == reserved_end:
                check.append(False)
            else:
                check.append(True)
        if all(check):
            return court, '', []
    reserved_times_answer = []

    for t in list(set(reserved_times_answer_cache)):
        if reserved_times_answer_cache.count(t) > 1:
            reserved_times_answer.append(t)
    return None, times, list(reserved_times_answer)


guide_text = (
    '–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–ª—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä—Ç—ñ –Ω–µ –±—ñ–ª—å—à–µ 6 –æ—Å—ñ–±. '
    '–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–∂–Ω—É –æ—Å–æ–±—É –¥–æ–¥–∞—Ç–∫–æ–≤–æ - 100 –≥—Ä–Ω. –∑–∞ –≥–æ–¥–∏–Ω—É\n\n'
    '‚ÄºÔ∏è–ü—Ä–∞–≤–∏–ª–∞‚ÄºÔ∏è\n\n'
    '1. –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ –∑–∞ 8 –≥–æ–¥–∏–Ω.‚è≥\n'
    '2. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –∫–∞–ø—Ü—ñ –∞–±–æ –∂ –ø—Ä–∏–¥–±–∞—Ç–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ñ –Ω–∞ —Ä–µ—Ü–µ–ø—Ü—ñ—ó.\n'
    '3. –ù–µ –º–æ–∂–Ω–∞ –≤–∏–Ω–æ—Å–∏—Ç–∏ —ó–∂—É –Ω–∞ –ø—ñ—Å–æ–∫.\n'
    '4. –ù–µ –º–æ–∂–Ω–∞ –≤–∏–Ω–æ—Å–∏—Ç–∏ –Ω–∞–ø–æ—ó, –æ–∫—Ä—ñ–º –≤–æ–¥–∏ —É –ø–ª–∞—Å—Ç–º–∞—Å–æ–≤—ñ–π –ø–ª—è—à—Ü—ñ –Ω–∞ –ø—ñ—Å–æ–∫.\n'
    '5. –ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ—Ä—Ç—ñ –∑ –≥–æ–ª–∏–º —Ç–æ—Ä—Å–æ–º.\n'
    '6. –¢—Ä–µ–±–∞ –≤–∏—Ä—ñ–≤–Ω—è—Ç–∏ –∫–æ—Ä—Ç –ø—ñ—Å–ª—è —Å–µ–±–µ (–ø–æ—á–∞—Ç–∏ –∑–∞ 5—Ö–≤ –¥–æ –∫—ñ–Ω—Ü—è –±—Ä–æ–Ω—ñ).\n'
    '7. –û–±–æ–≤‚Äò—è–∑–∫–æ–≤–æ –º–∞—Ç–∏ –ø—Ä–∏ —Å–æ–±—ñ –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π!‚ò∫\n'
)