import re
from datetime import timedelta

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from app.config import Config
from app.keyboards.inline.pay import confirm_payback_kb, payback_cb
from app.keyboards.reply.back import back_kb
from app.keyboards.reply.menu import payback_kb, menu_kb
from app.misc.utils import get_status, now, localize
from app.services.fondy import FondyAPIWrapper
from app.states.inputs import PaybackSG
from data.googlecalendar.calendar_api import GoogleCalendar
from app.handlers.private.start import start_cmd
from app.keyboards.reply.calendar import calendar_kb
from app.keyboards.reply.events import events_kb, delete_event_kb
from app.misc.enums import EventStatusEnum, SubStatusEnum, SubTypeEnum
from app.services.repos import EventRepo, CalendarRepo, UserRepo, SubRepo
from app.states.calendar import DeleteSG
from data.googlesheets.sheets_api import GoogleSheet
format_time = '%A %d, %B'


async def event_history(
        msg: Message, event_db: EventRepo, calendar_db: CalendarRepo,
        user_db: UserRepo, state: FSMContext, sheet: GoogleSheet, config: Config
):
    events = await event_db.get_events(msg.from_user.id)
    events.sort(key=lambda e: e.event_id)
    if not events:
        await msg.answer('–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å')
        await start_cmd(msg, user_db, state, sheet, config)
    time_format = '%H:%M'
    date_format = '%d.%m.%y'
    events_str = ''
    for event in events:
        calendar = await calendar_db.get_calendar_by_google_id(event.calendar_id)
        if len(events_str) >= 4000:
            await msg.answer(events_str, reply_markup=events_kb)
            events_str = ''
        if localize(event.end) < now():
            status_event = '<b>–ü–æ–¥—ñ—è –º–∏–Ω—É–ª–∞</b>'
        else:
            status_event = '<b>–ù–æ–≤–∞ üü¢</b>'
        events_str += (
            f'üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{event.event_id} [{status_event}]\n'
            f'–ê–¥—Ä–µ—Å–∞: {calendar.location} (–ö–æ—Ä—Ç {calendar.name})\n'
            f'–ß–∞—Å: {localize(event.start).strftime(time_format)} - {localize(event.end).strftime(time_format)} '
            f'({localize(event.end).strftime(date_format)})\n'
            f'–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {get_status(event)}\n\n'
        )
    if len(events_str) > 2:
        await msg.answer(events_str, reply_markup=events_kb)


async def delete_event_list(msg: Message,  event_db: EventRepo):
    events = await event_db.get_events(msg.from_user.id)
    await msg.answer('–û–±–µ—Ä—ñ—Ç—å –æ—Ä–µ–Ω–¥—É —è–∫—É –≤–∏ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É',
                     reply_markup=delete_event_kb(events))
    await DeleteSG.Delete.set()


async def confirm_delete_event(msg: Message, state: FSMContext, event_db: EventRepo):
    event_id = int(msg.text.split('#')[-1])
    event = await event_db.get_event(event_id)
    await state.update_data(event_id=event_id)
    await msg.answer(
        f'–í–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event_id} –Ω–∞ {localize(event.start).strftime(format_time)}. '
        f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä.',
        reply_markup=calendar_kb
    )
    await DeleteSG.Confirm.set()


async def delete_event(
        msg: Message, event_db: EventRepo,  calendar_db: CalendarRepo, sub_db: SubRepo, calendar:
        GoogleCalendar, state: FSMContext, user_db: UserRepo, sheet: GoogleSheet, config: Config,
):
    event_id = int((await state.get_data())['event_id'])
    event = await event_db.get_event(event_id)
    court = await calendar_db.get_calendar_by_google_id(event.calendar_id)
    user = await user_db.get_user(event.user_id)

    if event.status == EventStatusEnum.RESERVED:
        try:
            calendar.delete_event(event.calendar_id, event.google_id)
        except:
            pass
        await event_db.delete_event(event_id)
        await msg.answer(f'–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä ‚Ññ{event.event_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
                         reply_markup=events_kb)

    if event.status in (EventStatusEnum.PAID, EventStatusEnum.CONFIRM):
        if now() + timedelta(hours=8) < localize(event.end) < now():
            await msg.answer('‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ\n\n'
                             '–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ä–µ–Ω–¥—É –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ <b>–∑–∞ 8 –≥–æ–¥–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É.</b>\n\n')
            await event_history(msg, event_db, calendar_db, user_db, state, sheet, config)
        elif localize(event.end) < now():
            await event_db.delete_event(event_id)
            await event_history(msg, event_db, calendar_db, user_db, state, sheet, config)
        else:
            for admin_id in config.bot.admin_ids:
                event_link = 'https://docs.google.com/spreadsheets/d/{}/edit#gid=1781353891&range=A{}:D{}'.format(
                    config.misc.spreadsheet, event.event_id + 1, event.event_id + 1
                )
                text = (
                    f'‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–µ–Ω–¥–∏ ‚Ññ{event.event_id}\n\n'
                    f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.full_name}, {user.phone_number}\n\n'
                    f'üìå –î–∞—Ç–∞: {event.start.strftime("%A %d, %B")} –∑ {event.start.strftime("%H:%M")} –ø–æ '
                    f'{event.end.strftime("%H:%M")}\n\n'
                    f'üìö <a href="{event_link}">–¶—è –ø–æ–¥—ñ—è –≤ —Ç–∞–±–ª–∏—Ü—ñ</a>'
                )
                hours = (event.end - event.start).seconds / 3600
                if event.end.strftime('%A') in ('–°–±', '–ù–¥'):
                    if event.end.hour > 17:
                        event_type = SubTypeEnum.HOLEVENING
                    else:
                        event_type = SubTypeEnum.HOLMORNING
                else:
                    if event.end.hour > 17:
                        event_type = SubTypeEnum.WEEKEVENING
                    else:
                        event_type = SubTypeEnum.WEEKMORNING
                sub = await sub_db.add(
                    user_id=msg.from_user.id,
                    description=f'–ì–æ–¥–∏–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ ‚Ññ{event_id}',
                    total_hours=hours,
                    status=SubStatusEnum.ACTIVE,
                    type=event_type
                )
                if event.price == 0:
                    await msg.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n'
                                     '–ú–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–ª–∏ –í–∞–º —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–æ –í–∞—à–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É. '
                                     '–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –±—É–¥—å-–∫–æ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä—Ç—É.\n\n',
                                     reply_markup=menu_kb)
                    sheet.write_event(event, user, config.misc.spreadsheet, court)
                    await state.finish()
                    return
                await state.update_data(sub_id=sub.sub_id, price=event.price, evet_id=event_id,
                                        mention=msg.from_user.id)
                await msg.bot.send_message(admin_id, text)
            await msg.answer(f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n'
                             '–ú–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–ª–∏ –í–∞–º —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ –¥–æ –í–∞—à–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É. '
                             '–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –π–æ–≥–æ –±—É–¥—å-–∫–æ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä—Ç—É.\n\n'
                             '‚Ü™Ô∏èüí≥ –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—à—Ç–∏", '
                             '–ø—ñ—Å–ª—è —á–æ–≥–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–∏—Ç—å—Å—è, –∞ –∫–æ—à—Ç–∏ –±—É–¥—É—Ç—å '
                             '–Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.', reply_markup=payback_kb)
            await event_db.update_event(event_id, status=EventStatusEnum.DELETED)
            await PaybackSG.Card.set()
    sheet.write_event(event, user, config.misc.spreadsheet, court)


async def card_input(msg: Message):
    await msg.answer('–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ\n\n4444555566661111',
                     reply_markup=back_kb)
    await PaybackSG.Input.set()


async def payback(msg: Message, state: FSMContext, config: Config, user_db: UserRepo, sub_db: SubRepo):
    if not _check_card(msg.text):
        await msg.answer('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
        return
    data = await state.get_data()
    await sub_db.delete_sub(sub_id=int(data["sub_id"]))
    user = await user_db.get_user(int(data["mention"]))
    await msg.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–∞ —Å–∫–∞—Å–æ–≤–∞–Ω—É –æ–ø–ª–∞—Ç—É ‚Ññ{data["event_id"]} —É —Å—É–º—ñ {data["price"]} –±—É–ª–∞ '
                     f'–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –Ω–∞ —Ä–æ–∑–≥—è–ª–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.', reply_markup=menu_kb)
    for chat_id in config.bot.admin_ids:
        try:
            if chat_id == config.bot.admin_ids[-1]:
                reply_markup = confirm_payback_kb(msg.text, int(data["price"]), user_id=user.user_id)
            else:
                reply_markup = None
            await msg.bot.send_message(
                chat_id,
                '‚Ü™üí≥ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤\n\n'
                f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.full_name}, {user.phone_number}\n'
                f'–°–∫–∞—Å–æ–≤–∞–Ω–∞ –æ—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä ‚Ññ{data["event_id"]}: {data["price"]} –≥—Ä–Ω.\n'
                f'–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∞: <code>{msg.text}</code>\n\n'
                f'–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤',
                reply_markup=reply_markup
             )
        except:
            pass
    await state.finish()


async def pay_true(call: CallbackQuery, fondy: FondyAPIWrapper, callback_data: dict):
    price = int(callback_data['price'])
    card = callback_data['card']
    user_id = callback_data['user_id']
    await call.message.delete_reply_markup()
    if callback_data['action'] == 'true':
        if await fondy.withdraw(amount=price, receiver_card_number=card, user_id=call.from_user.id):
            try:
                await call.message.answer('–í–∏–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
                await call.bot.send_message(user_id,
                                            f'–í–∏–ø–ª–∞—Ç–∞ –ø–æ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ —É —Ä–æ–∑–º—ñ—Ä—ñ {price} –≥—Ä–Ω. –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
            except:
                pass
    else:
        await call.message.answer('–í–∏–ø–ª–∞—Ç–∞ –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞')


def setup(dp: Dispatcher):
    dp.register_message_handler(event_history, text='–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìö', state='*')
    dp.register_message_handler(delete_event_list, text='–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é', state='*')
    dp.register_message_handler(confirm_delete_event, state=DeleteSG.Delete)
    dp.register_message_handler(delete_event, text='–ü—ñ–¥—Ç–≤–µ–¥–∂—É—é ‚úÖ', state=DeleteSG.Confirm)
    dp.register_message_handler(card_input, text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—à—Ç–∏', state=PaybackSG.Card)
    dp.register_message_handler(payback, state=PaybackSG.Input)
    dp.register_callback_query_handler(pay_true, payback_cb.filter())


def _check_card(card: str):
    if len(card) != 16:
        return False
    a = [card[:4], card[4:8], card[8:12], card[12:]]
    if len(a) != 4:
        return False
    for b in a:
        if len(b) != 4:
            return False
        p = re.search("[456][0-9]{15}", card)
        card = card.replace("-", "")
        q = re.search(".*([0-9])\\1{3}.*", card)
        if p and not q:
            return True
        else:
            return False