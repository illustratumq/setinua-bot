import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentType, CallbackQuery

from app.config import Config
from app.handlers.private.event import choose_type
from app.keyboards.inline.pay import confirm_event_cb
from app.keyboards.inline.setting import call_me_kb
from app.keyboards.reply.profile import contact_kb, profile_kb, contact_device_kb
from app.misc.enums import EventStatusEnum
from app.misc.utils import construct_user_text
from app.services.repos import UserRepo, SubRepo, CalendarRepo, EventRepo
from app.states.inputs import NameSG, ContactSG
from data.googlecalendar.calendar_api import GoogleCalendar
from data.googlesheets.sheets_api import GoogleSheet

PHONE_REGEX = re.compile(r'^[+]380[0-9]*$')


async def profile_info(msg: Message, user_db: UserRepo, sub_db: SubRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    subs = await sub_db.get_subs_by_user_id(msg.from_user.id)
    text = (
        'üóÇ [–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å]\n\n' + construct_user_text(user, subs)
    )
    await state.update_data(to_event=False)
    await msg.answer(text, reply_markup=profile_kb)


async def rewrite_full_name(msg: Message):
    await msg.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º\'—è (–ü.–Ü.–ë)')
    await NameSG.Input.set()


async def save_full_name(msg: Message, state: FSMContext,
                         user_db: UserRepo, sub_db: SubRepo, sheet: GoogleSheet, config: Config):
    user = await user_db.get_user(msg.from_user.id)
    await user_db.update_user(msg.from_user.id, full_name=msg.text)
    sheet.write_user(user, config.misc.spreadsheet)
    if user.phone_number is None:
        await input_number_phone(msg)
    else:
        await state.finish()
        await msg.answer('–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ')
        await profile_info(msg, user_db, sub_db, state)


async def input_number_phone(msg: Message):
    await msg.answer('–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX', reply_markup=contact_device_kb)
    await ContactSG.Input.set()


async def save_number_phone(msg: Message, user_db: UserRepo, state: FSMContext, sub_db: SubRepo,
                            sheet: GoogleSheet, config: Config, calendar: GoogleCalendar,
                            calendar_db: CalendarRepo):
    await msg.answer('–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ')
    user = await user_db.get_user(msg.from_user.id)
    await user_db.update_user(msg.from_user.id, phone_number=msg.contact.phone_number)

    sheet.write_user(user, config.misc.spreadsheet)
    data = await state.get_data()
    if data.get('to_event'):
        await choose_type(msg, user_db, state)
    else:
        await state.finish()
        await profile_info(msg, user_db, sub_db, state)


async def save_custom_number_phone(msg: Message, user_db: UserRepo, state: FSMContext, sub_db: SubRepo,
                                   sheet: GoogleSheet, config: Config, calendar: GoogleCalendar,
                                   calendar_db: CalendarRepo):
    if len(msg.text) != len('+380XXXXXXXXX'):
        await msg.answer('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–±–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX')
        return
    await msg.answer('–£—Å–ø—ñ—à–Ω–æ –∑—ñ–º–Ω–µ–Ω–æ')
    user = await user_db.get_user(msg.from_user.id)
    await user_db.update_user(msg.from_user.id, phone_number=msg.text)
    data = await state.get_data()
    sheet.write_user(user, config.misc.spreadsheet)
    if data['to_event']:
        await choose_type(msg, user_db, state)
    else:
        await profile_info(msg, user_db, sub_db, state)
        await state.finish()


async def choose_number_phone(msg: Message):
    await msg.answer('–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–Ω–∞—Ç—ñ–≤', reply_markup=contact_kb)
    await ContactSG.Choose.set()


async def confirm_user_event(call: CallbackQuery, event_db: EventRepo, user_db: UserRepo, calendar_db: CalendarRepo,
                             callback_data, calendar: GoogleCalendar, sheet: GoogleSheet, config: Config):
    await call.answer('üòâ –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!')
    event_id = callback_data.get('event_id')
    action = callback_data.get('action')
    event = await event_db.get_event(int(event_id))
    user = await user_db.get_user(event.user_id)
    court = await calendar_db.get_calendar_by_google_id(event.calendar_id)
    if action == 'true':
        await event_db.update_event(event.event_id, status=EventStatusEnum.CONFIRM)
        calendar.event_confirm(event.calendar_id, event.google_id, user)
        sheet.write_event(event, user, config.misc.spreadsheet, court)
    else:
        for chat_id in config.bot.admin_ids:
            await call.bot.send_message(chat_id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name}, {user.phone_number}, ({user.user_id} '
                                        f'—Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{event.event_id} –Ω–∞ {event.start.strftime("%H:%M")}')
        await event_db.update_event(event.event_id, status=EventStatusEnum.DELETED)
        calendar.delete_event(event.calendar_id, event.google_id)
    sheet.write_event(event, user, config.misc.spreadsheet, court)
    await call.message.delete_reply_markup()


def setup(dp: Dispatcher):
    dp.register_callback_query_handler(confirm_user_event, confirm_event_cb.filter(), state='*')
    dp.register_message_handler(profile_info, text='–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üôé‚Äç‚ôÇÔ∏èüôç‚Äç‚ôÄÔ∏è', state='*')
    dp.register_message_handler(call_me, text='–ü–µ—Ä–µ–¥–∑–≤–æ–Ω—ñ—Ç—å –º–µ–Ω—ñ üìû', state='*')
    dp.register_message_handler(choose_number_phone, text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', state='*')
    dp.register_message_handler(rewrite_full_name, text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–º\'—è', state='*')
    dp.register_message_handler(save_full_name, state=NameSG.Input)

    dp.register_message_handler(input_number_phone, text='–Ü–Ω—à–∏–π –Ω–æ–º–µ—Ä', state=ContactSG.Choose)
    dp.register_message_handler(save_number_phone, content_types=ContentType.CONTACT, state='*')
    dp.register_message_handler(save_custom_number_phone, regexp=PHONE_REGEX, state=ContactSG.Input)


async def call_me(msg: Message, user_db: UserRepo, config: Config):
    user = await user_db.get_user(msg.from_user.id)
    if user.phone_number is None:
        await msg.answer('–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
        await choose_number_phone(msg)
        return
    await msg.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó. '
                     '–ú–∏ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üòâ')
    for chat_id in config.bot.admin_ids:
        await msg.bot.send_message(
            chat_id=chat_id, text=f'üì± –ü–µ—Ä–µ–¥–∑–≤–æ–Ω—ñ—Ç—å –º–µ–Ω—ñ\n'
                                  f'<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</b>: {user.full_name}\n'
                                  f'<b>–ù–æ–º–µ—Ä</b>: {user.phone_number}',
            reply_markup=call_me_kb(msg.from_user.id)
        )
